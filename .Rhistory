#
#
# # create another plot using age groups
# # ggplot(data = deathsAvertedGrpPlot, aes(x=Year, y=Deaths, color=AgeGroup, group=AgeGroup)) + geom_line() + theme_minimal() + ggtitle("Deaths averted 2020-2025, 10 year age groups") + theme(text = element_text(size = 14))
#
# # create another plot using without Age
# annualDeathsAvertedPlots[[pop.i]] <- ggplot(data = deathsAvertedGrpPlot %>%
#                                             group_by(Year) %>%
#                                             summarise("Deaths" = sum(Deaths)),
#                                             aes(x=Year, y=Deaths, label=round(Deaths))) +
#                                      geom_line() + theme_minimal()  + geom_point() +
#                                    # geom_text(hjust = 0, nudge_x = 0.055, nudge_y = -1, size = 7) +
#                                      theme(text = element_text(size = 14),
#                                            axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
#                                      scale_x_continuous(breaks=deathsAvertedGrpPlot$Year) +
#                                      ggtitle(paste(pop.label[which(pops==pop.i)]))
#                                    # ylim(0,150) + ggtitle("Annual deaths averted 2020-2025")
#
# # create another plot using without Age cumulative
# # ggplot(data = deathsAvertedGrpPlot %>% group_by(Year) %>% summarise("Deaths" = sum(Deaths)), aes(x=Year, y=cumsum(Deaths), label=round(cumsum(Deaths)))) + geom_line() + theme_minimal() + ggtitle("Cumulative deaths averted 2020-2025") + geom_point() +   geom_text(hjust = 0, nudge_x = 0.09,  nudge_y = -1, size = 7) +ylab("Cumulative deaths") + theme(text = element_text(size = 14))
#
# colData <- deathsAvertedPlot %>% group_by(Age) %>% summarise(Deaths = sum(Deaths))
#
# colData$Age <- as.numeric(colData$Age)
#
# deathsAvertedHistograms[[pop.i]] <- ggplot(data = colData, aes(x=Age, y=Deaths)) + geom_col(fill ="darkgrey") + theme_minimal() +
#     ylab("Deaths averted") + scale_x_continuous(breaks = pretty(colData$Age, n = 10)) + theme(text = element_text(size = 11), axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))  + ggtitle(paste(pop.label[which(pops==pop.i)])) # ggtitle("Cumulative deaths averted 2020-2025 by single year age") # + ylim(0,50)
# }
#
# grid.arrange(annualDeathsAvertedPlots[[1]], annualDeathsAvertedPlots[[2]],
#              annualDeathsAvertedPlots[[3]], annualDeathsAvertedPlots[[4]],
#              annualDeathsAvertedPlots[[5]], nrow = 2)
# grid.arrange(deathsAvertedHistograms[[1]], deathsAvertedHistograms[[2]],
#              deathsAvertedHistograms[[3]], deathsAvertedHistograms[[4]],
#              deathsAvertedHistograms[[5]], deathsAvertedHistograms[[6]], nrow = 2,
#                           top = textGrob("Figure 4: Age distribution of TB deaths attributable to racial-ethnic disparity\n",
#                             x = unit(2.5, "lines"), y = unit(0, "lines"),
#                             just = "left", hjust = .08, vjust = 0,  gp = gpar(fontsize = 19)))
### Calculate the costs averted for each population for each attainment year
### Since these are not age dependent we can use the summarised cases averted
### in caseDiffMultYrCuml list to populate the new list.
tbHealthServiceCostSavedTotal <- list()
tbHealthServiceCostSavedTotal_BC <- list()
tbHealthServiceCostSavedTotal_cfrBC <- list()
tbHealthServiceCostSavedTotal_casesBC <- list()
tbHealthServiceCostSavedTotal_both <- list()
# create a variable which holds the number of unique attainment years
differentScenIndex <- as.numeric(as.character(unique(caseDiffMultYr[[1]]$`Goal attainment year`)))
tmpTBHealthBC <- tmpTBHealthcfrBC <-  data.frame("Goal attainment year" = rep(differentScenIndex, each = 3),
"Estimate" = rep(c("Lower bound", "Point estimate", "Upper bound"), length(differentScenIndex)),
"TB Healthcare spending" = rep(0, length(differentScenIndex) * 3),
check.names = FALSE)
# define a matrix of 0 ltbi inits for calculations to work appropriately
LtbiInitsIncrem <- matrix(0, nrow = 13,
ncol = 101)
# define a matrix of 0 ltbi inits for calculations to work appropriately
LtbiTestsIncrem <- matrix(0, nrow = 13,
ncol = 101)
### Calculate the costs averted for each population for each attainment year
### Since these are not age dependent we can use the summarised cases averted
### in caseDiffMultYrCuml list to populate the new list.
nonTBHealthServiceCost_BC <- list()
nonTBHealthServiceCost_cfrBC <- list()
nonTBHealthServiceCost_casesBC <- list()
nonTBHealthServiceCost_both <- list()
# define a matrix of 0 ltbi inits for calculations to work appropriately
LtbiInitsIncrem <- matrix(0, nrow = 13,
ncol = 101)
### Calculate the costs averted for each population for each attainment year
### Since these are age dependent we must use the detailed case information
### in the caseDiffMultYr list to calculate the list. We will need to do this
### with a loop and iteratively.
productivityCostSavedTotal <- list()
productivityCostSavedTotal_BC <- list()
productivityCostSavedTotal_cfrBC <- list()
productivityCostSavedTotal_casesBC <- list()
productivityCostSavedTotal_both <- list()
# create a variable which holds the number of unique attainment years
differentScenIndex <- as.numeric(as.character(unique(caseDiffMultYr[[1]]$`Goal attainment year`)))
# create a dataframe that will hold the total productivity costs saved for each attainment year
tmpProdCostDf <- tmpProdCostDf_BC <- tmpProdCostDf_cfrBC <-
tmpProdCostDf_casesBC <-tmpProdCostDf_both <- data.frame("Goal attainment year" = rep(differentScenIndex, each = 3),
"Estimate" = rep(c("Lower bound", "Point estimate", "Upper bound"), length(differentScenIndex)),
"TLTBI productivity cost" = rep(0, length(differentScenIndex)*3),
"TB morbidity productivity cost" = rep(0, length(differentScenIndex)*3),
"TB mortality productivity cost" = rep(0, length(differentScenIndex)*3),
"Total productivity cost" = rep(0, length(differentScenIndex)*3),                                                                                        check.names = FALSE)
tmpHealthBC <- tmpHealthcfrBC <- tmpHealthcasesBC <-
tmpHealthBoth <- data.frame("Goal attainment year" = rep(differentScenIndex, each = 3),
"Estimate" = rep(c("Lower bound", "Point estimate", "Upper bound"), length(differentScenIndex)),
"Healthcare spending" = rep(0, length(differentScenIndex) * 3),
check.names = FALSE)
for (pop.i in pops){
print(pop.i)
for (scen in differentScenIndex)  {
### these need to be reshaped to fit the needs of the function below
### which takes a matrix of rows of the years of interest and columns are years of age
casesAverted <- matrix((caseDiffMultYr[[pop.i]] %>% filter(`Goal attainment year` == scen))[,6], 13, 303, byrow = TRUE)
# deathsAverted <- matrix((deathDiffMultYr[[pop.i]] %>% filter(`Goal attainment year` == scen))[,5], 13, 101, byrow = TRUE)
cases_BC <- matrix(casesList[[pop.i]][910:4848,1], 13, 303, byrow = TRUE)
deaths_BC <- matrix(deathsList[[pop.i]][910:4848,1], 13, 303, byrow = TRUE)
deathsAverted_cfrBC <- matrix((deathDiffMultYr_cfrBC[[pop.i]] %>% filter(`Goal attainment year` == scen))[,6], 13, 303, byrow = TRUE)
deathsAverted_casesBC <- matrix((deathDiffMultYr_casesBC[[pop.i]] %>% filter(`Goal attainment year` == scen))[,6], 13, 303, byrow = TRUE)
deathsAverted_both <- matrix((deathDiffMultYr_both[[pop.i]] %>% filter(`Goal attainment year` == scen))[,6], 13, 303, byrow = TRUE)
# define a matrix of 0 ltbi inits for calculations to work appropriately
LtbiInitsIncrem <- matrix(0, nrow = nrow(cases_BC),
ncol = 101)
######
### TB Health Services Costs
##################
for(est in 1:3){
index <- est  + (3 * (which(differentScenIndex == scen) -1))
tmpTBHealthBC[index,3] <- sum(calculateHealthCost(TbCases = cases_BC[,seq(est,ncol(cases_BC), by=3)],
TbDeaths = LtbiInitsIncrem,
LtbiTests = LtbiInitsIncrem,
LtbiTxInits = LtbiInitsIncrem)[["TB"]])
tmpTBHealthcfrBC[index,3] <- sum(calculateHealthCost(TbCases = casesAverted[,seq(est,ncol(cases_BC), by=3)],
TbDeaths = LtbiInitsIncrem,
LtbiTests = LtbiInitsIncrem,
LtbiTxInits = LtbiInitsIncrem)[["TB"]])
}
# print("from model")
# print(sum(tmpTBHealthcfrBC[2,3]))
# print("back calcs")
# print(sum(casesAverted[,seq(2,ncol(cases_BC), by=3)]) * HealthServiceUnitCosts()["TBtx"])
tbHealthServiceCostSavedTotal_BC [[pop.i]] <- tmpTBHealthBC
tbHealthServiceCostSavedTotal_cfrBC [[pop.i]] <- tmpTBHealthcfrBC
######
### NON TB HEALTHCARE SPENDING
##################
for(est in 1:3){
index <- est  + (3 * (which(differentScenIndex == scen) -1))
tmpHealthBC[index,3] <- calculateHealthCost(TbCases = cases_BC[,seq(est,ncol(cases_BC), by=3)],
TbDeaths = deaths_BC[,seq(est,ncol(cases_BC), by=3)],
LtbiTests = LtbiInitsIncrem,
LtbiTxInits = LtbiInitsIncrem)[["nonTB"]]
tmpHealthcfrBC[index,3] <- calculateHealthCost(TbCases = casesAverted[,seq(est,ncol(cases_BC), by=3)],
TbDeaths = deathsAverted_cfrBC[,seq(est,ncol(cases_BC), by=3)],
LtbiTests = LtbiInitsIncrem,
LtbiTxInits = LtbiInitsIncrem)[["nonTB"]]
tmpHealthcasesBC[index,3] <- calculateHealthCost(TbCases = casesAverted[,seq(est,ncol(cases_BC), by=3)],
TbDeaths = deathsAverted_casesBC[,seq(est,ncol(cases_BC), by=3)],
LtbiTests = LtbiInitsIncrem,
LtbiTxInits = LtbiInitsIncrem)[["nonTB"]]
tmpHealthBoth[index,3] <- calculateHealthCost(TbCases = casesAverted[,seq(est,ncol(cases_BC), by=3)],
TbDeaths = deathsAverted_both[,seq(est,ncol(cases_BC), by=3)],
LtbiTests = LtbiInitsIncrem,
LtbiTxInits = LtbiInitsIncrem)[["nonTB"]]
}
nonTBHealthServiceCost_BC [[pop.i]] <- tmpHealthBC
nonTBHealthServiceCost_cfrBC [[pop.i]] <- tmpHealthcfrBC
nonTBHealthServiceCost_casesBC [[pop.i]] <- tmpHealthcasesBC
nonTBHealthServiceCost_both [[pop.i]] <- tmpHealthBoth
######
### PRODUCTIVITY COSTS
##################
for (est in 1:3){
index <- est  + (3 * (which(differentScenIndex == scen) -1))
##### Under the base case assumptions
tmpList_BC <- calculateProdCost(TbCases = cases_BC[,seq(est,ncol(cases_BC), by=3)],
TbDeaths = deaths_BC[,seq(est,ncol(cases_BC), by=3)],
LtbiTxInits = LtbiInitsIncrem,
# discount = 0,
Ages = "SingleYearAge")
# fill in the dataframe we created above with the cumulative costs in the generated list
tmpProdCostDf_BC[index,3:6] <- c(sum(tmpList_BC[[1]]), sum(tmpList_BC[[2]]),
sum(tmpList_BC[[3]]), sum(tmpList_BC[[4]]))
##### Only incidence rate adjusted
tmpList_cfrBC <- calculateProdCost(TbCases = casesAverted[,seq(est,ncol(cases_BC), by=3)],
TbDeaths = deathsAverted_cfrBC[,seq(est,ncol(cases_BC), by=3)],
LtbiTxInits = LtbiInitsIncrem,
# discount = 0,
Ages = "SingleYearAge")
# fill in the dataframe we created above with the cumulative costs in the generated list
tmpProdCostDf_cfrBC[index,3:6] <- c(sum(tmpList_cfrBC[[1]]), sum(tmpList_cfrBC[[2]]),
sum(tmpList_cfrBC[[3]]), sum(tmpList_cfrBC[[4]]))
##### Only incidence rate adjusted
tmpList_casesBC <- calculateProdCost(TbCases = casesAverted[,seq(est,ncol(cases_BC), by=3)],
TbDeaths = deathsAverted_casesBC[,seq(est,ncol(cases_BC), by=3)],
LtbiTxInits = LtbiInitsIncrem,
# discount = 0,
Ages = "SingleYearAge")
# fill in the dataframe we created above with the cumulative costs in the generated list
tmpProdCostDf_casesBC[index, 3:6] <- c(sum(tmpList_casesBC[[1]]), sum(tmpList_casesBC[[2]]),
sum(tmpList_casesBC[[3]]), sum(tmpList_casesBC[[4]]))
##### Only incidence rate adjusted
tmpList_both <- calculateProdCost(TbCases = casesAverted[,seq(est,ncol(cases_BC), by=3)],
TbDeaths = deathsAverted_both[,seq(est,ncol(cases_BC), by=3)],
LtbiTxInits = LtbiInitsIncrem,
# discount = 0,
Ages = "SingleYearAge")
# fill in the dataframe we created above with the cumulative costs in the generated list
tmpProdCostDf_both[index,3:6] <- c(sum(tmpList_both[[1]]), sum(tmpList_both[[2]]),
sum(tmpList_both[[3]]), sum(tmpList_both[[4]]))
}
# print total costs saved
# print(sum(productivityCostSavedTotal[[pop.i]][["TotalProdCost"]]))
# print(sum(productivityCostSavedTotal[[pop.i]][["TotalProdCost"]])/sum(casesAverted))
# print(sum(productivityCostSavedTotal[[pop.i]][["TbMortCost"]]))
# print(sum(productivityCostSavedTotal[[pop.i]][["TbProdCost"]]))
# }
productivityCostSavedTotal[[pop.i]] <- tmpProdCostDf_both
productivityCostSavedTotal_BC[[pop.i]] <- tmpProdCostDf_BC
productivityCostSavedTotal_cfrBC[[pop.i]] <- tmpProdCostDf_cfrBC
productivityCostSavedTotal_casesBC[[pop.i]] <- tmpProdCostDf_casesBC
productivityCostSavedTotal_both[[pop.i]] <- tmpProdCostDf_both
}}
print("TB Healthcare")
allPopsTbHealthServiceCosts <- cbind(tbHealthServiceCostSavedTotal_BC[[1]][,1:2],
# Base case
(tbHealthServiceCostSavedTotal_BC[[1]][,3]+tbHealthServiceCostSavedTotal_BC[[2]][,3] +
tbHealthServiceCostSavedTotal_BC[[3]][,3]+tbHealthServiceCostSavedTotal_BC[[4]][,3]+
tbHealthServiceCostSavedTotal_BC[[5]][,3]+tbHealthServiceCostSavedTotal_BC[[6]][,3])/1e9,
# CFR base case, incidence disparity removed
(tbHealthServiceCostSavedTotal_cfrBC[[1]][,3] + tbHealthServiceCostSavedTotal_cfrBC[[2]][,3] +
tbHealthServiceCostSavedTotal_cfrBC[[3]][,3] + tbHealthServiceCostSavedTotal_cfrBC[[4]][,3]+
tbHealthServiceCostSavedTotal_cfrBC[[5]][,3] + tbHealthServiceCostSavedTotal_cfrBC[[6]][,3])/1e9,
# IR base case, casefatality disparity removed
(tbHealthServiceCostSavedTotal_cfrBC[[1]][,3] + tbHealthServiceCostSavedTotal_cfrBC[[2]][,3] +
tbHealthServiceCostSavedTotal_cfrBC[[3]][,3] + tbHealthServiceCostSavedTotal_cfrBC[[4]][,3]+
tbHealthServiceCostSavedTotal_cfrBC[[5]][,3]+tbHealthServiceCostSavedTotal_cfrBC[[6]][,3])/1e9,
# Adjusted for both disparities
(tbHealthServiceCostSavedTotal_cfrBC[[1]][,3]+tbHealthServiceCostSavedTotal_cfrBC[[2]][,3] +
tbHealthServiceCostSavedTotal_cfrBC[[3]][,3]+tbHealthServiceCostSavedTotal_cfrBC[[4]][,3]+
tbHealthServiceCostSavedTotal_cfrBC[[5]][,3]+tbHealthServiceCostSavedTotal_cfrBC[[6]][,3])/1e9
)
colnames(allPopsTbHealthServiceCosts)[3:6] <- c("Basecase TB health services costs",
"CFR BC TB health services costs",
"IR BC TB health services costs",
"Disparities removed TB health services costs")
print(allPopsTbHealthServiceCosts[1:3,])
print("nonTb Healthcare")
allPopsHealthServiceCosts <- cbind(nonTBHealthServiceCost_BC[[1]][,1:2],
# Base case
(nonTBHealthServiceCost_BC[[1]][,3]+nonTBHealthServiceCost_BC[[2]][,3] +
nonTBHealthServiceCost_BC[[3]][,3]+nonTBHealthServiceCost_BC[[4]][,3]+
nonTBHealthServiceCost_BC[[5]][,3]+nonTBHealthServiceCost_BC[[6]][,3])/1e9,
# CFR base case, incidence disparity removed
(nonTBHealthServiceCost_cfrBC[[1]][,3]+nonTBHealthServiceCost_cfrBC[[2]][,3] +
nonTBHealthServiceCost_cfrBC[[3]][,3]+nonTBHealthServiceCost_cfrBC[[4]][,3]+
nonTBHealthServiceCost_cfrBC[[5]][,3]+nonTBHealthServiceCost_cfrBC[[6]][,3])/1e9,
# IR base case, casefatality disparity removed
(nonTBHealthServiceCost_casesBC[[1]][,3]+nonTBHealthServiceCost_casesBC[[2]][,3] +
nonTBHealthServiceCost_casesBC[[3]][,3]+nonTBHealthServiceCost_casesBC[[4]][,3]+
nonTBHealthServiceCost_casesBC[[5]][,3]+nonTBHealthServiceCost_casesBC[[6]][,3])/1e9,
# Adjusted for both disparities
(nonTBHealthServiceCost_both[[1]][,3]+nonTBHealthServiceCost_both[[2]][,3] +
nonTBHealthServiceCost_both[[3]][,3]+nonTBHealthServiceCost_both[[4]][,3]+
nonTBHealthServiceCost_both[[5]][,3]+nonTBHealthServiceCost_both[[6]][,3])/1e9
)
colnames(allPopsHealthServiceCosts)[3:6] <- c("Basecase health services costs",
"CFR BC health services costs",
"IR BC health services costs",
"Disparities removed health services costs")
print(allPopsHealthServiceCosts[1:3,])
print("productivity costs (in billions")
allPopsProductivityCosts <- cbind(productivityCostSavedTotal_BC[[1]][,1:2],
# Base case
(productivityCostSavedTotal_BC[[1]][,6]+productivityCostSavedTotal_BC[[2]][,6] +
productivityCostSavedTotal_BC[[3]][,6]+productivityCostSavedTotal_BC[[4]][,6]+
productivityCostSavedTotal_BC[[5]][,6]+productivityCostSavedTotal_BC[[6]][,6])/1e9,
# CFR base case, incidence disparity removed
(productivityCostSavedTotal_cfrBC[[1]][,6]+productivityCostSavedTotal_cfrBC[[2]][,6] +
productivityCostSavedTotal_cfrBC[[3]][,6]+productivityCostSavedTotal_cfrBC[[4]][,6]+
productivityCostSavedTotal_cfrBC[[5]][,6]+productivityCostSavedTotal_cfrBC[[6]][,6])/1e9,
# IR base case, casefatality disparity removed
(  productivityCostSavedTotal_casesBC[[1]][,6]+productivityCostSavedTotal_casesBC[[2]][,6] +
productivityCostSavedTotal_casesBC[[3]][,6]+productivityCostSavedTotal_casesBC[[4]][,6]+
productivityCostSavedTotal_casesBC[[5]][,6]+productivityCostSavedTotal_casesBC[[6]][,6])/1e9,
# Adjusted for both disparities
(productivityCostSavedTotal_both[[1]][,6]+productivityCostSavedTotal_both[[2]][,6] +
productivityCostSavedTotal_both[[3]][,6]+productivityCostSavedTotal_both[[4]][,6]+
productivityCostSavedTotal_both[[5]][,6]+productivityCostSavedTotal_both[[6]][,6])/1e9
)
colnames(allPopsProductivityCosts)[3:6] <- c("Basecase productivity costs",
"CFR BC productivity costs",
"IR BC productivity costs",
"Disparities removed productivity costs")
print((allPopsProductivityCosts[1:3,]))
### Calculate the QALYs gained for each population for each attainment year
### Since these are age dependent we must use the detailed case information
### in the caseDiffMultYr list to calculate the list. We will need to do this
### with a loop and iteratively.
QALYsTotal_BC <- list()
QALYsGainedTotal <- list()
QALYsGainedTotal_cfrBC <- list()
QALYsGainedTotal_casesBC <- list()
QALYsGainedTotal_both <- list()
# create a dataframe that will hold the qalys gained for each attainment year
tmpQALYsDf <- tmpQALYsDf_cfrBC <-
tmpQALYsDf_casesBC <-tmpQALYsDf_both <- data.frame("Goal attainment year" = rep(differentScenIndex, each = 3),
"Estimate" = rep(c("Lower bound", "Point estimate", "Upper bound"), length(differentScenIndex) ),
"TLTBI QALYs" = rep(0, length(differentScenIndex) * 3),
"TB morbidity QALYs" = rep(0, length(differentScenIndex) * 3),
"TB mortality QALYs" = rep(0, length(differentScenIndex) * 3),
"Total QALYs" = rep(0, length(differentScenIndex) * 3),
check.names = FALSE)
for (pop.i in pops){
print(pop.i)
for (scen in differentScenIndex)  {
### these need to be reshaped to fit the needs of the function below
### which takes a matrix of rows of the years of interest and columns are years of age
casesAverted <- matrix((caseDiffMultYr[[pop.i]] %>% filter(`Goal attainment year` == scen))[,6], 13, 303, byrow = TRUE)
# deathsAverted <- matrix((deathDiffMultYr[[pop.i]] %>% filter(`Goal attainment year` == scen))[,5], 13, 101, byrow = TRUE)
cases_BC <- matrix(casesList[[pop.i]][910:4848,1], 13, 303, byrow = TRUE)
deaths_BC <- matrix(deathsList[[pop.i]][910:4848,1], 13, 303, byrow = TRUE)
deathsAverted_cfrBC <- matrix((deathDiffMultYr_cfrBC[[pop.i]] %>% filter(`Goal attainment year` == scen))[,6], 13, 303, byrow = TRUE)
deathsAverted_casesBC <- matrix((deathDiffMultYr_casesBC[[pop.i]] %>% filter(`Goal attainment year` == scen))[,6], 13, 303, byrow = TRUE)
deathsAverted_both <- matrix((deathDiffMultYr_both[[pop.i]] %>% filter(`Goal attainment year` == scen))[,6], 13, 303, byrow = TRUE)
# define a matrix of 0 ltbi inits for calculations to work appropriately
LtbiInitsIncrem <- matrix(0, nrow = nrow(casesAverted),
ncol = 101)
for(est in 1:3){
index <- est  + (3 * (which(differentScenIndex == scen) -1))
tmpList <- calculateQALYs(TbCases = cases_BC[,seq(est,ncol(cases_BC), by=3)],
TbDeaths = deaths_BC[,seq(est,ncol(cases_BC), by=3)],
LtbiTxInits = LtbiInitsIncrem,
discount = 0,
Ages = "SingleYearAge")
# fill in the dataframe we created above with the cumulative costs in the generated list
tmpQALYsDf[index,3:6] <- c(sum(tmpList[[1]]), sum(tmpList[[2]]),
sum(tmpList[[3]]), sum(tmpList[[4]]))
### only incidence rate adjusted
tmpList_cfrBC <- calculateQALYs(TbCases = casesAverted[,seq(est,ncol(cases_BC), by=3)],
TbDeaths = deathsAverted_cfrBC[,seq(est,ncol(cases_BC), by=3)],
LtbiTxInits = LtbiInitsIncrem,
discount = 0,
Ages = "SingleYearAge")
tmpQALYsDf_cfrBC[index,3:6] <- c(sum(tmpList_cfrBC[[1]]), sum(tmpList_cfrBC[[2]]),
sum(tmpList_cfrBC[[3]]), sum(tmpList_cfrBC[[4]]))
### only case-fatality rate adjusted
tmpList_casesBC <- calculateQALYs(TbCases = casesAverted[,seq(est,ncol(cases_BC), by=3)],
TbDeaths = deathsAverted_casesBC[,seq(est,ncol(cases_BC), by=3)],
LtbiTxInits = LtbiInitsIncrem,
discount = 0,
Ages = "SingleYearAge")
tmpQALYsDf_casesBC[index,3:6] <- c(sum(tmpList_casesBC[[1]]), sum(tmpList_casesBC[[2]]),
sum(tmpList_casesBC[[3]]), sum(tmpList_casesBC[[4]]))
### both rates adjusted
tmpList_both <- calculateQALYs(TbCases = casesAverted[,seq(est,ncol(cases_BC), by=3)],
TbDeaths = deathsAverted_both[,seq(est,ncol(cases_BC), by=3)],
LtbiTxInits = LtbiInitsIncrem,
discount = 0,
Ages = "SingleYearAge")
tmpQALYsDf_both[index,3:6] <- c(sum(tmpList_both[[1]]), sum(tmpList_both[[2]]),
sum(tmpList_both[[3]]), sum(tmpList_both[[4]]))
}
}
QALYsTotal_BC[[pop.i]] <- tmpQALYsDf
print(tmpQALYsDf[1,5])
QALYsGainedTotal_cfrBC[[pop.i]] <- tmpQALYsDf_cfrBC
print(tmpQALYsDf_cfrBC[1,5])
QALYsGainedTotal_casesBC[[pop.i]] <- tmpQALYsDf_casesBC
print(tmpQALYsDf_casesBC[1,5])
QALYsGainedTotal_both[[pop.i]] <- tmpQALYsDf_both
print(tmpQALYsDf_both[1,5])
}
print(sum(QALYsGainedTotal_both[[1]][2,6], QALYsGainedTotal_both[[2]][2,6], QALYsGainedTotal_both[[3]][2,6],
QALYsGainedTotal_both[[5]][2,6], QALYsGainedTotal_both[[4]][2,6], QALYsGainedTotal_both[[6]][2,6]))
print("Total qalys gained with 2035 attainment year ")
print(sum(QALYsGainedTotal_both[[1]][38,6], QALYsGainedTotal_both[[2]][38,6], QALYsGainedTotal_both[[3]][38,6],
QALYsGainedTotal_both[[5]][38,6], QALYsGainedTotal_both[[4]][38,6], QALYsGainedTotal_both[[6]][38,6]))
print("Lower:")
print(sum(QALYsGainedTotal_both[[1]][37,6], QALYsGainedTotal_both[[2]][37,6], QALYsGainedTotal_both[[3]][37,6],
QALYsGainedTotal_both[[5]][37,6], QALYsGainedTotal_both[[4]][37,6], QALYsGainedTotal_both[[6]][37,6]))
print("Upper:")
print(sum(QALYsGainedTotal_both[[1]][39,6], QALYsGainedTotal_both[[2]][39,6], QALYsGainedTotal_both[[3]][39,6],
QALYsGainedTotal_both[[5]][39,6], QALYsGainedTotal_both[[4]][39,6], QALYsGainedTotal_both[[6]][39,6]))
for (pop.i in pops){
print(pop.i)
qalysList <- QALYsGainedTotal_casesBC
print("With CFR adjusted:")
print(paste0("Cumulative base-case QALYs lost ", round(QALYsTotal_BC[[pop.i]][2,6], 1),
"(", round(QALYsTotal_BC[[pop.i]][1,6],1),
", ", round(QALYsTotal_BC[[pop.i]][3,6],1),")"))
print(paste0("Cumulative QALYs gained ",
round(qalysList[[pop.i]][2,6],1),
"(", round(qalysList[[pop.i]][1,6], 1),
", ", round(qalysList[[pop.i]][3,6], 1),")"))
print(paste0("Cumulative QALYs gained as percentage of basecase",
round(qalysList[[pop.i]][2,6] / QALYsTotal_BC[[pop.i]][2,6] * 100, 1),
"(", round(qalysList[[pop.i]][1,6] / QALYsTotal_BC[[pop.i]][1,6] * 100, 1),
", ", round(qalysList[[pop.i]][3,6] / QALYsTotal_BC[[pop.i]][3,6] * 100, 1),")"))
qalysList <- QALYsGainedTotal_cfrBC
print("With IR adjusted:")
print(paste0("Cumulative QALYs gained ",
round(qalysList[[pop.i]][2,6], 1),
"(", round(qalysList[[pop.i]][1,6], 1),
", ", round(qalysList[[pop.i]][3,6], 1),")"))
print(paste0("Cumulative QALYs gained as percentage of basecase",
round(qalysList[[pop.i]][2,6] / QALYsTotal_BC[[pop.i]][2,6] * 100, 1),
"(", round(qalysList[[pop.i]][1,6] / QALYsTotal_BC[[pop.i]][1,6] * 100, 1),
", ", round(qalysList[[pop.i]][3,6] / QALYsTotal_BC[[pop.i]][3,6] * 100, 1),")"))
qalysList <- QALYsGainedTotal_both
print("With CFR and IR adjusted:")
print(paste0("Cumulative QALYs gained ",
round(qalysList[[pop.i]][2,6], 1),
"(", round(qalysList[[pop.i]][1,6], 1),
", ", round(qalysList[[pop.i]][3,6], 1),")"))
print(paste0("Cumulative QALYs gained as percentage of basecase",
round(qalysList[[pop.i]][2,6] / QALYsTotal_BC[[pop.i]][2,6] * 100, 1),
"(", round(qalysList[[pop.i]][1,6] / QALYsTotal_BC[[pop.i]][1,6] * 100, 1),
", ", round(qalysList[[pop.i]][3,6] / QALYsTotal_BC[[pop.i]][3,6] * 100, 1),")"))
}
### Calculate the case differences for the workflow below
QALYDiffMultYr <- QALYDiffMultYrCuml <- list()
QALYDiffCurvePlot <-list()
# QALYsGainedTotal_both[[2]][,5] <- 0
for (pop.i in pops){
print(pop.i)
### ### ### ### ### ### ### ### ### ### ### ### ###
### Create a plot that shows the different number #
### of QALYs averted across each attainment year #
### ### ### ### ### ### ### ### ### ### ### ### ###
# if (pop.i %in% c("AMIND", "ASIAN", "NAHAW")) {
#   yLim <- 1000
# } else{
#   yLim <- 16000
# }
QALYDiffCurvePlot[[pop.i]] <- ggplot(QALYsGainedTotal_both[[pop.i]] %>% filter(`Goal attainment year` %in% 2023:2035, Estimate == "Point estimate"),
aes(y=`Total QALYs`, x=`Goal attainment year`)) +
# geom_line(size=2) +  geom_point(size = 5) +
geom_col(fill =myPal2[2], alpha=0.7) +
theme_minimal() +  ylim(0,16000) +
scale_x_continuous(breaks = analysisYears) + ylab("QALYs gained") +
theme(text = element_text(size = 11), legend.position = "bottom",
axis.text.x = element_text(angle = 45, vjust = 0.95, hjust=1)) +
ggtitle(paste(pop.label[which(pops==pop.i)]))
print("Annual average QALYs lost to delay:")
print((QALYsGainedTotal_both[[pop.i]][2,5]-QALYsGainedTotal_both[[pop.i]][38,5])/13)
print("Lower:")
print((QALYsGainedTotal_both[[pop.i]][1,5]-QALYsGainedTotal_both[[pop.i]][37,5])/13)
print("Upper:")
print((QALYsGainedTotal_both[[pop.i]][3,5]-QALYsGainedTotal_both[[pop.i]][39,5])/13)
}
grid.arrange(QALYDiffCurvePlot[[1]], QALYDiffCurvePlot[[2]],
QALYDiffCurvePlot[[3]], QALYDiffCurvePlot[[4]],
QALYDiffCurvePlot[[5]], QALYDiffCurvePlot[[6]], nrow=2,
top = textGrob("Figure 3: QALYs gained under different disparity goal attainment years\n",
x = unit(2.5, "lines"), y = unit(0, "lines"),
just = "left", hjust = .09, vjust = 0,  gp = gpar(fontsize = 19)))
grid.arrange(QALYDiffCurvePlot[[1]], QALYDiffCurvePlot[[2]],
QALYDiffCurvePlot[[5]], QALYDiffCurvePlot[[3]],
QALYDiffCurvePlot[[4]], QALYDiffCurvePlot[[6]], nrow=2,
top = textGrob("Figure 3: QALYs gained under different disparity goal attainment years\n",
x = unit(2.5, "lines"), y = unit(0, "lines"),
just = "left", hjust = .09, vjust = 0,  gp = gpar(fontsize = 19)))
# ggplot() + geom_ribbon(data = allPopsEcon_d %>% filter(Scenario %in% c("Base-case", "Both disparities")),
#                  aes(ymin = 0, ymax=`Point estimate`/1e9, x=`Goal attainment year`, group=Scenario, fill=`Scenario`), alpha=0.7, color = "white") +
#        theme_minimal() + scale_fill_manual(values = myPal2) +
#        scale_x_continuous(breaks = analysisYears) + ylab("Costs (billions)") +
#        theme(text = element_text(size = 11), legend.position = "bottom",
#              axis.text.x = element_text(angle = 45, vjust = 0.95, hjust=1)) +
#        ggtitle("Economic costs under different disparity removal scenarios")
LifeYearsSavedTotal <- list()
# create a dataframe that will hold the total productivity costs saved for each attainment year
tmpLifeYearsDf <- data.frame("Goal attainment year" = differentScenIndex,
"Total life years saved" = rep(0, length(differentScenIndex)))
for (pop.i in pops){
print(pop.i)
tmpLifeYearsDf <- QALYsGainedTotal_both[[pop.i]][,4]
LifeYearsSavedTotal[[pop.i]] <- tmpLifeYearsDf
}
0.55/1.08
0.349/0.842
0.927/1.537
13*0.4
((1.537-0.927)/13)1.537
((1.537-0.927)/13)/1.537
((0.842-0.349)/13)/0.842
library(TubercuCost)
casesAvertedTest <- dummyCases()
deathsAvertedTest <- casesAvertedTest * 0.10 ### extremely crude estimate
LtbiInitsIncrem <- matrix(0, nrow = nrow(casesAvertedTest),
ncol = ncol(casesAvertedTest))
healthServiceCost <- sum(casesAvertedTest * HealthServiceUnitCosts()["TBtx"])
healthServiceCost
productivityCost <- calculateProdCost(TbCases = casesAvertedTest,
TbDeaths = deathsAvertedTest,
LtbiTxInits = LtbiInitsIncrem,
discount = 1,
Years = 2020:2025,
Ages = 0:100)
productivityCost <- calculateProdCost(TbCases = casesAvertedTest,
TbDeaths = deathsAvertedTest,
LtbiTxInits = LtbiInitsIncrem,
discount = 0,
Ages="SingleYearAge")
productivityCost
productivityCost <- calculateProdCost(TbCases = casesAvertedTest,
TbDeaths = deathsAvertedTest,
LtbiTxInits = LtbiInitsIncrem,
discount = 0,
Ages="SingleYearAge")
productivityCost$TotalProdCost
QALYsGained <- calculateQALYs(TbCases = casesAvertedTest,
TbDeaths = deathsAvertedTest,
LtbiTxInits = 0)
QALYsGained <- calculateQALYs(TbCases = casesAvertedTest,
TbDeaths = deathsAvertedTest,
LtbiTxInits = LtbiInitsIncrem)
QALYsGained
QALYsGained <- calculateQALYs(TbCases = casesAvertedTest,
TbDeaths = deathsAvertedTest,
LtbiTxInits = LtbiInitsIncrem,
discount = 0)
QALYsGained
### will functionalize this so it gives all relevant ICERs in a list
NMB <- -healthServiceCost - sum(productivityCost[[3]]) +  QALYsGained * c(100000, 150000, 200000)
### will functionalize this so it gives all relevant ICERs in a list
NMB <- -healthServiceCost - sum(productivityCost[[3]]) +  sum(QALYsGained$TotalQaly) * c(100000, 150000, 200000)
NMB
