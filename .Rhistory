setwd("~/Desktop/covidAdjParams")
##### load model data
model_load()
##### define the COVID adjustment parameter initial values
paraminitCOVID <- readRDS("covidAdjData/paraminitCOVID.rds")
##### define the optim parameter set for starting
# optimParCOVID <- readRDS(file = "~/MITUS/inst/US/ParamAllCovid.rds")
load("covidAdjData/Opt_USCOVID_r5_1_2024-04-05.rda")
optimParCOVID <-o5$par; names(optimParCOVID) <- rownames(paraminitCOVID)
#### Source in functions from original optimization script
source("covid_adjustment.R")
####################################################################################
###################                FUNCTIONS                ########################
####################################################################################
###  ASSESS DENSITY OF PROPOSAL DISTRIBUTION
dpropnewCOVID <- function(samps, mu, vcv, logg=F) {
##### define the COVID adjustment parameter initial values
paraminitCOVID <- readRDS("covidAdjData/paraminitCOVID.rds")
if(dim(as.data.frame(samps))[2]==1) { samps <- t(as.data.frame(samps)) }
##
lpz_y <- dmnorm(samps,mu,vcv,log=T)
##
lpy_y <- dmnorm(samps,rep(0,length(mu)),diag(length(mu)),log=T)
##
lpx_invf_y <- rep(0,nrow(samps))
for(samp_i in 1:nrow(samps)) {
### norm2unif
Par2 <- pnorm(samps[samp_i,],0,1)
Par3 <- Par2
### uniform to true
for (i in 1:length(Par3)){
if (i %in% which(paraminitCOVID[,"Distribution"] == "Gamma")){
Par3[i] <- qgamma(Par2[i], shape = paraminitCOVID[i,5], rate = paraminitCOVID[i,6])
} else if (i %in% which(paraminitCOVID[,"Distribution"] == "Beta")){
Par3[i] <- qbeta(Par2[i], shape1  = paraminitCOVID[i,5], shape2 = paraminitCOVID[i,6])
} else if (i %in% which(paraminitCOVID[,"Distribution"] == "Normal")){
Par3[i] <- qnorm(Par2[i], mean = paraminitCOVID[i,5], sd = paraminitCOVID[i,6])
}
}
### call the prior function
lpx_invf_y[samp_i] <- lpriorCOVID_B(Par = samps[samp_i,], Par3 = Par3)
### set poor values to NA
if(lpx_invf_y[samp_i]%in%c(-Inf,Inf)) { lpx_invf_y[samp_i] <- NA }  }
# unsure of the purpose of this scaling
ldpn <- lpz_y - lpy_y + lpx_invf_y
ret <- if(logg==T) { ldpn } else { exp(ldpn) }
return(ret)  }
ImisCOVID <- function (B = 1000, B.re = 5000, number_k = 100, seed_val=1,SaveNam="xx", n_cores=2, OptInit=optimParCOVID) {
# lprior = log prior for matrix with rows = samples, cols = pars (or a vector)
# llikelihood = log likelihood for matrix with rows = samples,cols = pars
##### define the COVID adjustment parameter initial values
paraminitCOVID <- readRDS("covidAdjData/paraminitCOVID.rds")
D = 1
B0               = B * 10
Sig2_global      = diag(length(OptInit))
set.seed(seed_val+10^5)
#############################################################################
#### IMPORTANCE SAMPLING
#############################################################################
# Step 1a from Raftery and Bao:
# Sample N0 inputs θ1, θ2, …, θN0 from the prior distribution p(θ).
# (sample B0-1 parameter sets (our optim parameter set will be the remaining parameter set))
#############################################################################
zd               = randomLHS(B0-1,nrow(paraminitCOVID))
for(ij in 1:length(OptInit)) zd[,ij] <- zd[,ij]+OptInit[ij]
# Bind the sample parameter sets with the optimized parameter set
X_all            = X_k = rbind(OptInit,zd)
# Create an empty dataframe to hold stats during the algorithm run
stat_all         = matrix(NA,number_k,7); colnames(stat_all) <- c("Stage","UniquePoint","MaxWeight","ESS","MaxPost","NoDropped","NoSamp")
# Create empty objects to hold the results of function calls
center_all       = lprior_all = llike_all = lgaus1_all = NULL
sigma_all        = list()
option.opt = 0
for (k in 1:number_k) { # k<-1
ptm.like       = proc.time()
#############################################################################
# Step 1b from Raftery and Bao
# For each θi, calculate the likelihood Li, and form the importance weights.
# Note number_k is the maximum number of iterations
#############################################################################
lgaus1_all     = c(lgaus1_all, dpropnewCOVID(samps=X_k,
mu=OptInit,
vcv=diag(length(OptInit)),
logg=T))
lprior_all     = c(lprior_all, lpriorCOVID(ParMatrix = X_k))
llike_all      = c(llike_all, llikelihoodCOVID_B(X_k))
ptm.use        = (proc.time() - ptm.like)[3]
if (k == 1) { print(paste(B0, "likelihoods are evaluated in", round(ptm.use/60,1), "minutes")); flush.console() }
if (k == 1) {  lenvelop_all = lgaus1_all } else { lenvelop_all = log(apply(rbind(exp(lgaus1_all)*B0/B,gaussian_all),2,sum)/(B0/B+D+(k-2))) }
### Calculate the posterior value = importance weights
lWeights       =  lprior_all + llike_all + lenvelop_all
### Determine which weights perform the worst and drop
lWeightsZ = -max(lWeights,na.rm=T)
lWeightsZ[is.na(lWeightsZ)] = -Inf
Drop      = lWeightsZ < (-10000)
lWeightsZ
if(sum(Drop==F)>1e5)  Drop[rank(-lWeightsZ)>1e5] = T
# drop them...
X_all        = X_all[Drop==F,]
lgaus1_all   = lgaus1_all[Drop==F]
lprior_all   = lprior_all[Drop==F]
llike_all    = llike_all[Drop==F]
lWeights     = lWeights[Drop==F]
lenvelop_all = lenvelop_all[Drop==F]
if (k > 1) {
gaussian_all = gaussian_all[,Drop==F]
}
### Calculate final weights and normalize them
Weights        = exp(lWeights-max(lWeights))
Weights        = Weights/sum(Weights)
### Fill in the stats from that iteration
stat_all[k, 1] = k #iteration number
stat_all[k, 2] = sum(1-(1-Weights)^B.re) #e(x) of unique parameter sets
stat_all[k, 3] = max(Weights) #which sampling weight is the highest (hope decreasing) !!
stat_all[k, 4] = 1/sum(Weights^2) #effective sample size (hope increasing) !!
stat_all[k, 5] = max(lprior_all + llike_all,na.rm=T)[1] #posterior mode
stat_all[k, 6] = sum(Drop) #number of dropped parameter sets
stat_all[k, 7] = length(Weights)
print(round(stat_all[1:k,], 3)); flush.console()
### TEMP SAVE
nonzero        = which(Weights>0)
if(length(nonzero)>1) {
which_X        = sample(nonzero,B.re,replace = T,prob=Weights[nonzero])
resample_X     = X_all[which_X, ]
resamp_lprior  = lprior_all[which_X]
resamp_llike   = llike_all[which_X]
resamp_lenvelop = lenvelop_all[which_X]
imis_res_tmp   = list(stat            = stat_all,
resample        = resample_X,
resamp_lprior   = resamp_lprior,
resamp_llike    = resamp_llike,
resamp_lenvelop = resamp_lenvelop)
save(imis_res_tmp, file=paste("temp_",SaveNam,".rData",sep=""))
}
#############################################################################
#### MIXTURE SAMPLING
#############################################################################
# Step 2a from Raftery and Bao
# Choose the current maximum weight input as the center θ(k). Estimate Σ(k)
# as the weighted covariance of the B inputs with the smallest Mahalanobis
# distances to θ(k), where the distances are calculated with respect to the
# covariance of the prior distribution and the weights are taken to be
# proportional to the average of the importance weights and 1/Nk.
#############################################################################
important = which(Weights == max(Weights))
if (length(important) > 1) { important = important[1] }
X_imp              = X_all[important, ]
center_all         = rbind(center_all, X_imp)
distance_all       = mahalanobis(X_all, X_imp, diag(diag(Sig2_global)))
Bz                 = min(B,length(distance_all))
which_var          = sort(distance_all,index=T)$ix[1:Bz]
#############################################################################
# Step 2b from Raftery and Bao
# Sample B new inputs from a multivariate Gaussian distribution
# Hk with covariance matrix Σ(k).
#############################################################################
Sig2               = cov.wt(X_all[which_var, ],wt=Weights[which_var]+1/length(Weights),center=X_imp)$cov
#####
sigma_all[[D+k-1]] = Sig2
jr                 = tryCatch({ X_k = rmnorm(B, X_imp, Sig2) }, error = function(e) NA)
while(is.na(jr)[1]) {
gf                 = 0
jr                 = tryCatch({ X_k = rmnorm(B,X_imp,Sig2+diag(nrow(Sig2))/10^(12-gf)) }, error = function(e) NA)
sigma_all[[D+k-1]] = Sig2 + diag(nrow(Sig2))/10^(12-gf)
gf                 = gf+1
}
X_all              = rbind(X_all, X_k)
#############################################################################
# Step 2c from Raftery and Bao
# Calculate the likelihood of the new inputs and combine the new inputs
# with the previous ones.
#############################################################################
if (k == 1) {
gaussian_all = matrix(NA,D,dim(X_all)[1])
for (i in 1:D) { gaussian_all[i, ] = dpropnewCOVID(X_all,center_all[i,],sigma_all[[i]],logg=F) }
}
if (k > 1) {
gaussian_new = matrix(0, D + k - 1, dim(X_all)[1])
gaussian_new[1:(D+k-2),1:(dim(X_all)[1]-B)] = gaussian_all
gaussian_new[D+k-1,] = dpropnewCOVID(X_all,X_imp,sigma_all[[D+k-1]],logg=F)
for (j in 1:(D+k-2)) { gaussian_new[j,(dim(X_all)[1]-B+1):dim(X_all)[1]] = dpropnewCOVID(X_k, center_all[j,],sigma_all[[j]],logg=F) }
gaussian_all = gaussian_new
}
if(stat_all[k,3] > (1-exp(-1))*B.re) {  break }
}
imis_res_fin <- list(stat            = stat_all,
resample        = resample_X,
resamp_lprior   = resamp_lprior,
resamp_llike    = resamp_llike,
resamp_lenvelop = resamp_lenvelop)
save(imis_res_fin, file=paste(SaveNam,".rData",sep=""))
return(imis_res_fin)
}
seed_val_arg <- 30
# seed_val_arg <- 30
######## set the run name for saving the results ##########
run_nam <- paste0("covidAdjIMIS_07_21_24_S_", seed_val_arg)
######## call the IMIS function #######
imis_result <- ImisCOVID(B = 10, B.re = 10, number_k = 10, seed_val=seed_val_arg, SaveNam=run_nam, n_cores=1, OptInit=optimParCOVID)
optimParCOVID
OptInit=optimParCOVI
B = 10
B.re = 10
number_k = 10
seed_val=seed_val_arg
SaveNam=run_nam
n_cores=1
# lprior = log prior for matrix with rows = samples, cols = pars (or a vector)
# llikelihood = log likelihood for matrix with rows = samples,cols = pars
##### define the COVID adjustment parameter initial values
paraminitCOVID <- readRDS("covidAdjData/paraminitCOVID.rds")
paraminitCOVID
D = 1
B0               = B * 10
Sig2_global      = diag(length(OptInit))
set.seed(seed_val+10^5)
#############################################################################
#### IMPORTANCE SAMPLING
#############################################################################
# Step 1a from Raftery and Bao:
# Sample N0 inputs θ1, θ2, …, θN0 from the prior distribution p(θ).
# (sample B0-1 parameter sets (our optim parameter set will be the remaining parameter set))
#############################################################################
zd               = randomLHS(B0-1,nrow(paraminitCOVID))
for(ij in 1:length(OptInit)) zd[,ij] <- zd[,ij]+OptInit[ij]
OptInit=optimParCOVID
Sig2_global      = diag(length(OptInit))
set.seed(seed_val+10^5)
#############################################################################
#### IMPORTANCE SAMPLING
#############################################################################
# Step 1a from Raftery and Bao:
# Sample N0 inputs θ1, θ2, …, θN0 from the prior distribution p(θ).
# (sample B0-1 parameter sets (our optim parameter set will be the remaining parameter set))
#############################################################################
zd               = randomLHS(B0-1,nrow(paraminitCOVID))
for(ij in 1:length(OptInit)) zd[,ij] <- zd[,ij]+OptInit[ij]
# Bind the sample parameter sets with the optimized parameter set
X_all            = X_k = rbind(OptInit,zd)
# Create an empty dataframe to hold stats during the algorithm run
stat_all         = matrix(NA,number_k,7); colnames(stat_all) <- c("Stage","UniquePoint","MaxWeight","ESS","MaxPost","NoDropped","NoSamp")
# Create empty objects to hold the results of function calls
center_all       = lprior_all = llike_all = lgaus1_all = NULL
sigma_all        = list()
option.opt = 0
k<-1
ptm.like       = proc.time()
#############################################################################
# Step 1b from Raftery and Bao
# For each θi, calculate the likelihood Li, and form the importance weights.
# Note number_k is the maximum number of iterations
#############################################################################
lgaus1_all     = c(lgaus1_all, dpropnewCOVID(samps=X_k,
mu=OptInit,
vcv=diag(length(OptInit)),
logg=T))
lprior_all     = c(lprior_all, lpriorCOVID(ParMatrix = X_k))
llike_all      = c(llike_all, llikelihoodCOVID_B(X_k))
llike_all
llikelihoodCOVID_B
X_k
llikelihoodCOVID_B(X_k)
llikelihoodCOVID(1, X_k)
X_k
###############################################################################
### Load in packages
library(dplyr)
library(splines)
library(MITUS, lib.loc="~/apps/R.4.2.2/calib_MITUS")
###############################################################################
### Load in the calibrated MITUS model
model_load("US")
###############################################################################
### Create the starting parameter matrix
### First make a matrix of each value and its prior boundaries
### 1. Rate of case finding (Dxt)
###    Informed from household pulse survey delayed care
### 2. Immigration volume (Immig)
###    Informed from DHS OIS LPR Annual Flow Report
### 3. Contact rates (Trans)
###    Informed
### 4. Death to case ratios (CaseFat)
# Function for calculating beta parameters
betapar <- function(tgt) {
tgt <- as.numeric(tgt)
mn <- tgt[1]; cir <- (tgt[3]-tgt[2])
xopt <- function(xx,mn=mn,cir=cir) {
cir2 <- qbeta(c(1,39)/40,xx*(mn/(1-mn)),xx); cir2 <- cir2[2]-cir2[1]
sum((cir2-cir)^2) }
zz <- optimize(xopt,c(0.2,100000),mn=mn,cir=cir)$minimum
bp <-  c(zz*(mn/(1-mn)),zz)
if(sum(abs(bp-1))<0.2) { c(1,1) } else { bp }  }
# Function for calculating gamma parameters
gammapar <- function(tgt) {
tgt <- as.numeric(tgt)
mn <- tgt[1]; cir <- (tgt[3]-tgt[2])
xopt <- function(b,mn,cir) {
cir2 <- qgamma(c(1,39)/40,mn*b,b); cir2 <- cir2[2]-cir2[1]
(cir2-cir)^2 }
zz <- optimize(xopt,c(0.1,100000),mn=mn,cir=cir)$minimum
c(zz*mn,zz) }
###############################################################################
### Read in all the data files for the prior construction ###
immig_trend <- readRDS(file = "covidAdjData/immigrationTrend.rds")
### filter to the relevant values
immig_trend_vals <- (immig_trend[c(9,15,21,27,33,39)] + lag(immig_trend[c(3,9,15,21,27,33,39)])[2:7])/2
### check with a plot
# plot(immig_trend_vals)
rDxt_trend <- readRDS(file = "covidAdjData/careSeekingTrend.rds")
### filter to the relevant values
rDxt_trend_vals <- c((rDxt_trend[c(9,15,20)] + lag(rDxt_trend[c(3,9,15,20)])[2:4])/2, rep(1,3))
### check with a plot
# plot(rDxt_trend_vals)
NixTrans_trend <- readRDS(file = "covidAdjData/contactRateTrend.rds")
### filter to the relevant values
NixTrans_trend_vals <- (NixTrans_trend[c(9,15,21,27,33,39)] + lag(NixTrans_trend[c(3,9,15,21,27,33,39)])[2:7])/2
### check with a plot
# plot(NixTrans_trend_vals)
deathsToNotif_trend <- readRDS(file = "covidAdjData/deathToNotifRRTrend_04-03-24.rds")
### filter to the relevant values
deathsToNotif_trend_vals <- (deathsToNotif_trend[c(9,15,21,27,33,39)] + lag(deathsToNotif_trend[c(3,9,15,21,27,33,39)])[2:7])/2
deathsToNotif_trend_vals_LB <- deathsToNotif_trend_vals*0.5
deathsToNotif_trend_vals_UB <- deathsToNotif_trend_vals*1.5
### check with a plot
# plot(deathsToNotif_trend_vals)
###############################################################################
##### Define the initial parameters and their priors  ###
###############################################################################
paraminitCOVID <- readRDS("covidAdjData/paraminitCOVID.rds")
###############################################################################
##### Generate random starting values ###
##############################################################################
startvalCOVID  <- readRDS("covidAdjData/startvalCOVID.rds")
###############################################################################
##### Define the log-likelihood function
###############################################################################
llikelihoodCOVID <- function(samp_i = 1,
start_mat = startvalCOVID,
InitPar = paraminitCOVID,
TB = 1,
return_params = def_returnScenario()){
### Create the parameter vector
### parCOVID will hold the three parameter adjustment factors to be fed into
### the param_init function for the model run.
if(min(dim(as.data.frame(start_mat))) == 1) {
optCOVID <- as.numeric(start_mat)
} else {
optCOVID <- as.numeric(start_mat[samp_i,])
}
parCOVID2 <- pnorm(optCOVID,0,1)
# unif2true
parCOVID3 <- parCOVID2
for (i in 1:length(parCOVID3)){
if (i %in% which(InitPar[,"Distribution"] == "Gamma")){
parCOVID3[i] <- qgamma(parCOVID2[i], shape = InitPar[i,5], rate = InitPar[i,6])
} else if (i %in% which(InitPar[,"Distribution"] == "Beta")){
parCOVID3[i] <- qbeta(parCOVID2[i], shape1  = InitPar[i,5], shape2 = InitPar[i,6])
} else if (i %in% which(InitPar[,"Distribution"] == "Normal")){
parCOVID3[i] <- qnorm(parCOVID2[i], mean = InitPar[i,5], sd = InitPar[i,6])
}
}
parCOVID  <- parCOVID3
names(parCOVID) <- c("ImmigKnot1", "ImmigKnot2", "ImmigKnot3", "ImmigKnot4", "ImmigKnot5", "ImmigKnot6",
"DxtKnot1", "DxtKnot2", "DxtKnot3", "DxtKnot4", "DxtKnot5", "DxtKnot6",
"TransKnot1", "TransKnot2", "TransKnot3", "TransKnot4", "TransKnot5", "TransKnot6",
"CaseFatKnot1", "CaseFatKnot2", "CaseFatKnot3", "CaseFatKnot4", "CaseFatKnot5", "CaseFatKnot6")
### Setup the model run ###
### Set P to the optimal parameter set which is loaded in with load_model()
### from the MITUS package.
P <- Par[4,]
### Default program change parameters
prg_chng <- def_prgchng(P)
### Default care cascade parameters
care_cascade <- def_care_cascade()
### Create the parameter list that is passed into the model function
### Create an empty list for the parameters
prms <- list()
jj <- tryCatch({
### Create a vector of all the parameters for immigration adjustment
immig2020Vec <- parCOVID[c("ImmigKnot1", "ImmigKnot2", "ImmigKnot3",
"ImmigKnot4", "ImmigKnot5", "ImmigKnot6")]
### Call the param_init function to generate the parameter values for the model
prms <- param_init(P, "US", prg_chng = prg_chng,
ttt_list = def_ttt(), immig2020Vec = immig2020Vec)
### Make alterations to the parameter list for COVID changes
prms2020 <- adj_param_2020(rDxt = prms$rDxt,
NixTrans = prms$NixTrans,
par2020 = parCOVID,
return_params = return_params)
### Rebalance the population across the RR of generic risk strata
trans_mat_tot_ages <- reblncd(mubt = prms$mubt,
can_go = can_go,
RRmuHR = prms$RRmuHR[2],
RRmuRF = prms$RRmuRF,
HRdist = HRdist,
dist_gen_v = dist_gen_v,
adj_fact = prms[["adj_fact"]])
if(any(trans_mat_tot_ages > 1)) print("transition probabilities are too high")
setup <- c(2024 - (1950 - 1), length(func_ResNam()), 11)
zz <- cSim(setup_pars   = setup                 , rDxt          = prms2020[["rDxt"]]   , TxQualt            = prms[["TxQualt"]]     , InitPop       = prms[["InitPop"]],
Mpfast        = prms[["Mpfast"]]      , ExogInf       = prms[["ExogInf"]]    , MpfastPI           = prms[["MpfastPI"]]    , Mrslow        = prms[["Mrslow"]]      , rrSlowFB      = prms[["rrSlowFB"]],
rfast         = prms[["rfast"]]       , RRcurDef      = prms[["RRcurDef"]]   , rSlfCur            = prms[["rSlfCur"]]     , p_HR          = prms[["p_HR"]]        , vTMort        = prms[["vTMort"]],
RRmuRF        = prms[["RRmuRF"]]      , RRmuHR        = prms[["RRmuHR"]]     , Birthst            = prms[["Birthst"]]     , HrEntEx       = prms[["HrEntEx"]]     , ImmNon        = prms[["ImmNon"]],
ImmLat        = prms[["ImmLat"]]      , ImmAct        = prms[["ImmAct"]]     , ImmFst             = prms[["ImmFst"]]      , Int1Test      = prms[['Int1Test']]    , Int1Init      = prms[["Int1Init"]],
Int1Tx        = prms[['Int1Tx']]      , net_mig_usb   = prms[["net_mig_usb"]], net_mig_nusb       = prms[["net_mig_nusb"]], RRmuTBPand    =  prms2020[["RRmuTBPand"]],
mubt          = prms[["mubt"]]        , RelInf        = prms[["RelInf"]]     , RelInfRg           = prms[["RelInfRg"]]    , RRcrAG        = prms[["RRcrAG"]]      , Vmix          = prms[["Vmix"]],
rEmmigFB      = prms [["rEmmigFB"]]   , TxVec         = prms[["TxVec"]]      , TunTxMort          = prms[["TunTxMort"]]   , rDeft         = prms[["rDeft"]]       , ttt_samp_dist = prms[["ttt_sampling_dist"]],
ttt_ag        = prms[["ttt_ag"]]      , ttt_na        = prms[["ttt_na"]]     , ttt_month          = prms[["ttt_month"]]   , ttt_pop_scrn  = prms[["ttt_pop_scrn"]], ttt_ltbi      = prms[["ttt_ltbi"]],
LtTxPar       = prms[["LtTxPar"]]     , LtDxPar_lt    = prms[["LtDxPar_lt"]] , LtDxPar_nolt       = prms[["LtDxPar_nolt"]], rrTestLrNoTb  = prms[["rrTestLrNoTb"]], rrTestHr      = prms[["rrTestHr"]],
rLtScrt       = prms[["rLtScrt"]]     , RRdxAge       = prms[["RRdxAge"]]    , ttt_ltbi_init      = care_cascade[1]       , ttt_ltbi_comp = care_cascade[2]       , ttt_ltbi_eff  = care_cascade[3],
ttt_ltbi_sens = care_cascade[4]       , ttt_ltbi_spec = care_cascade[5]      , ttt_ltbi_accept    = care_cascade[6]       , rRecov        = prms[["rRecov"]]      , pImmScen      = prms[["pImmScen"]],
EarlyTrend    = prms[["EarlyTrend"]]  , pReTx         = prms[["pReTx"]]      , ag_den             = prms[["aging_denom"]] , NixTrans      = prms2020[["NixTrans"]]    , dist_gen      = prms[["dist_gen"]],
trans_mat_tot_ages = trans_mat_tot_ages)
if(sum(is.na(zz$Outputs[70,])) > 0 | min(zz$Outputs[70,]) < 0 | min(zz$V1) < 0 ) {
lLik <- -10^12
} else {
### initialize to zero
lLik <- 0
## Rename the model output
M <- zz$Outputs
colnames(M) <- func_ResNam()
#############################################################################
# TOTAL DIAGNOSED CASES 2020-2022
# 2020, 2021, 2022 Notifications
v1M    <- ( M[71:74, "NOTIF_ALL"] + M[71:74,"NOTIF_MORT_ALL"])
# Call the likelihood function and print
addlik <- notif_tot_20_lik(V = v1M); addlik
# Add the individual likelihood to the total
lLik   <- lLik + addlik
#############################################################################
# NATIVITY DISTRIBUTION DIAGNOSED CASES 2020-2022
v5M    <- (M[71:74,147]+M[71:74,200]) / v1M #(M[71:73, "NOTIF_ALL"] + M[71:73,"NOTIF_MORT_ALL"])
# Call the likelihood function and print
nativity_dist_20_lLik(V = v5M); addlik
# Add the individual likelihood to the total
lLik   <- lLik + addlik * 2
#############################################################################
# CASES FB RECENT ENTRY DISTRIBUTION 2020-2022
# 2020, 2021, 2022 recent entry percentage
v2M    <- (M[71:73, 148] + M[71:73, 201])/ rowSums(M[71:73, 201:202] + M[71:73, 148:149])
# Call the likelihood function and print
addlik <- notif_NUSBrec_20_lik(V = v2M); addlik
# Add the individual likelihood to the total
lLik   <- lLik + addlik * 2
#############################################################################
# DEATHS 2020-2022
# 2020, 2021, 2022 deaths
v4M   <- rowSums(M[71:74, 253:254])
# Call the likelihood function and print
addlik <- deaths_20_lik(V = v4M); addlik
# Add the individual likelihood to the total
lLik   <- lLik + addlik
} }, error = function(e) NA)
if(is.na(jj))         { lLik <- -10^12 - sum((paraminitCOVID[,5] - parCOVID) ^ 2) }
if(jj%in%c(-Inf,Inf)) { lLik <- -10^12 - sum((paraminitCOVID[,5] - parCOVID) ^ 2) }
# Return the total likelihood value
return(lLik)
}
calibdatCOVID <- readRDS("covidAdjData/calibdatCOVID.rds")
samp_i = 1
start_mat = startvalCOVID
InitPar = paraminitCOVID
llikelihoodCOVID_B(startvalCOVID)
return_params = def_returnScenario()
if(min(dim(as.data.frame(start_mat))) == 1) {
optCOVID <- as.numeric(start_mat)
} else {
optCOVID <- as.numeric(start_mat[samp_i,])
}
if(min(dim(as.data.frame(start_mat))) == 1) {
optCOVID <- as.numeric(start_mat)
} else {
optCOVID <- as.numeric(start_mat[samp_i,])
}
parCOVID2 <- pnorm(optCOVID,0,1)
parCOVID3 <- parCOVID2
for (i in 1:length(parCOVID3)){
if (i %in% which(InitPar[,"Distribution"] == "Gamma")){
parCOVID3[i] <- qgamma(parCOVID2[i], shape = InitPar[i,5], rate = InitPar[i,6])
} else if (i %in% which(InitPar[,"Distribution"] == "Beta")){
parCOVID3[i] <- qbeta(parCOVID2[i], shape1  = InitPar[i,5], shape2 = InitPar[i,6])
} else if (i %in% which(InitPar[,"Distribution"] == "Normal")){
parCOVID3[i] <- qnorm(parCOVID2[i], mean = InitPar[i,5], sd = InitPar[i,6])
}
}
parCOVID  <- parCOVID3
names(parCOVID) <- c("ImmigKnot1", "ImmigKnot2", "ImmigKnot3", "ImmigKnot4", "ImmigKnot5", "ImmigKnot6",
"DxtKnot1", "DxtKnot2", "DxtKnot3", "DxtKnot4", "DxtKnot5", "DxtKnot6",
"TransKnot1", "TransKnot2", "TransKnot3", "TransKnot4", "TransKnot5", "TransKnot6",
"CaseFatKnot1", "CaseFatKnot2", "CaseFatKnot3", "CaseFatKnot4", "CaseFatKnot5", "CaseFatKnot6")
### Setup the model run ###
### Set P to the optimal parameter set which is loaded in with load_model()
### from the MITUS package.
P <- Par[4,]
### Default program change parameters
prg_chng <- def_prgchng(P)
### Default care cascade parameters
care_cascade <- def_care_cascade()
### Create the parameter list that is passed into the model function
### Create an empty list for the parameters
prms <- list()
### Create a vector of all the parameters for immigration adjustment
immig2020Vec <- parCOVID[c("ImmigKnot1", "ImmigKnot2", "ImmigKnot3",
"ImmigKnot4", "ImmigKnot5", "ImmigKnot6")]
### Call the param_init function to generate the parameter values for the model
prms <- param_init(P, "US", prg_chng = prg_chng,
ttt_list = def_ttt(), immig2020Vec = immig2020Vec)
model_load()
library(MITUS)
### Call the param_init function to generate the parameter values for the model
prms <- param_init(P, "US", prg_chng = prg_chng,
ttt_list = def_ttt(), immig2020Vec = immig2020Vec)
